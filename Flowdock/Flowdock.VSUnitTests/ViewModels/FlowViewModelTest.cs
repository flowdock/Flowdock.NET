using Flowdock.Client.Context;
using Flowdock.Client.Domain;
using Flowdock.ViewModels;
using Microsoft.VisualStudio.TestPlatform.UnitTestFramework;
using MoqaLate.Autogenerated;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Flowdock.VSUnitTests.ViewModels {
    public class MockFlowdockContext : FlowdockContext {

        public override Task<Flow> GetFlow(string flowId) {
            return Task.FromResult<Flow>(new Flow() {
                Id = "my flow",
                Users = ExpectedUsers
            });
        }

        public override Task<IEnumerable<Message>> GetMessagesForFlow(string id) {
            return Task.FromResult<IEnumerable<Message>>(ExpectedMessages);
        }

        public override void SendMessage(string flowId, string message) {
            SendMessageFlowId = flowId;
            SendMessageMessage = message;
        }
        
        public IEnumerable<Message> ExpectedMessages { get; set; }
        public List<User> ExpectedUsers { get; set; }

        public string SendMessageFlowId { get; private set; }
        public string SendMessageMessage { get; private set; }
    }

    [TestClass]
    public class FlowViewModelTest {
        private static List<Message> _expectedMessages;
        private static List<User> _expectedUsers;

        private static MockFlowdockContext _mockFlowdockContext;
        private FlowViewModel _flowViewModel;

        [ClassInitialize]
        public static void BeforeAll(TestContext testContext) {
            _expectedMessages = new List<Message> {
                new Message() { User = 1, Event = "message", Content = "first message" },
                new Message() { User = 2, Event = "message", Content = "second message" }
            };

            _expectedUsers = new List<User> {
                new User() { Id = 1, Avatar = new Uri("http://www.fake.com/1.png") },
                new User() { Id = 2, Avatar = new Uri("http://www.fake.com/2.png") }
            };

            _mockFlowdockContext = new MockFlowdockContext();
            _mockFlowdockContext.ExpectedMessages = _expectedMessages;
            _mockFlowdockContext.ExpectedUsers = _expectedUsers;
        }

        [TestInitialize]
        public void BeforeEach() {
            _flowViewModel = new FlowViewModel(
                new AppSettingsMoqaLate(), 
                _mockFlowdockContext, 
                new ProgressServiceMoqaLate(), 
                new NavigationManagerMoqaLate(), 
                new FlowStreamingConnectionMoqaLate(), 
                new MessageServiceMoqaLate()
            );

            _flowViewModel.FlowId = "some:flow";
        }
        
        [TestMethod]
        public void ShouldLoadFlowMessages() {
            _flowViewModel.Activate();

            Assert.AreEqual(_expectedMessages.Count, _flowViewModel.Messages.Count);
        }

        [TestMethod]
        public void ShouldGetCorrectAvatarForMessage() {
            _flowViewModel.Activate();

            Assert.AreEqual(_expectedUsers.Count, _flowViewModel.Messages.Count);

            // Then, make sure that the avatar maches to the the message the user made
            for (var i = 0; i < _expectedUsers.Count; i++) {
                Assert.AreEqual(_expectedUsers[i].Avatar, _flowViewModel.Messages[i].Avatar);
            }
        }

        [TestMethod]
        public void CanSendMessageToFlow_returns_false_if_there_is_no_new_message() {
            _flowViewModel.NewMessage = null;
            Assert.IsFalse(_flowViewModel.CanSendMessageToFlow);
        }

        [TestMethod]
        public void CanSendMessageToFlow_returns_true_if_there_is_a_new_message() {
            _flowViewModel.NewMessage = null;
            Assert.IsFalse(_flowViewModel.CanSendMessageToFlow);

            _flowViewModel.NewMessage = "my new message";
            Assert.IsTrue(_flowViewModel.CanSendMessageToFlow);
        }

        [TestMethod]
        public void SendMessageToFlow_sends_the_new_message_to_the_correct_flow() {
            string newMessage = "the new message";

            _flowViewModel.NewMessage = newMessage;

            _flowViewModel.SendMessageToFlow();

            Assert.AreEqual(newMessage, _mockFlowdockContext.SendMessageMessage);
            Assert.AreEqual(_flowViewModel.FlowId, _mockFlowdockContext.SendMessageFlowId);
        }
    }
}