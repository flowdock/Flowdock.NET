using Flowdock.Client.Domain;
using System.Collections.Generic;
using System.Threading.Tasks;
using Flowdock.Client.Context;
namespace MoqaLate.Autogenerated
{
public partial class FlowdockContextMoqaLate : IFlowdockContext
{


// -------------- Login ------------ 

private Task<string> _loginReturnValue;

        private int _loginNumberOfTimesCalled;

        public string LoginParameter_username_LastCalledWith;public string LoginParameter_password_LastCalledWith;
        
        public virtual void LoginSetReturnValue(Task<string> value)
        {
            _loginReturnValue = value;
        }    


        public virtual bool LoginWasCalled()
{
   return _loginNumberOfTimesCalled > 0;
}


public virtual bool LoginWasCalled(int times)
{
   return _loginNumberOfTimesCalled == times;
}


public virtual int LoginTimesCalled()
{
   return _loginNumberOfTimesCalled;
}


public virtual bool LoginWasCalledWith(string username, string password){
return (
username.Equals(LoginParameter_username_LastCalledWith)  && 
password.Equals(LoginParameter_password_LastCalledWith) );
}
 

             public Task<string> Login(string username, string password)
        {
            _loginNumberOfTimesCalled++;            

            LoginParameter_username_LastCalledWith = username;LoginParameter_password_LastCalledWith = password;

            return _loginReturnValue;
        }

// -------------- GetCurrentFlows ------------ 

private Task<IEnumerable<Flow>> _getCurrentFlowsReturnValue;

        private int _getCurrentFlowsNumberOfTimesCalled;

        
        
        public virtual void GetCurrentFlowsSetReturnValue(Task<IEnumerable<Flow>> value)
        {
            _getCurrentFlowsReturnValue = value;
        }    


        public virtual bool GetCurrentFlowsWasCalled()
{
   return _getCurrentFlowsNumberOfTimesCalled > 0;
}


public virtual bool GetCurrentFlowsWasCalled(int times)
{
   return _getCurrentFlowsNumberOfTimesCalled == times;
}


public virtual int GetCurrentFlowsTimesCalled()
{
   return _getCurrentFlowsNumberOfTimesCalled;
}


 

             public Task<IEnumerable<Flow>> GetCurrentFlows()
        {
            _getCurrentFlowsNumberOfTimesCalled++;            

            

            return _getCurrentFlowsReturnValue;
        }

// -------------- GetFlow ------------ 

private Task<Flow> _getFlowReturnValue;

        private int _getFlowNumberOfTimesCalled;

        public string GetFlowParameter_id_LastCalledWith;
        
        public virtual void GetFlowSetReturnValue(Task<Flow> value)
        {
            _getFlowReturnValue = value;
        }    


        public virtual bool GetFlowWasCalled()
{
   return _getFlowNumberOfTimesCalled > 0;
}


public virtual bool GetFlowWasCalled(int times)
{
   return _getFlowNumberOfTimesCalled == times;
}


public virtual int GetFlowTimesCalled()
{
   return _getFlowNumberOfTimesCalled;
}


public virtual bool GetFlowWasCalledWith(string id){
return (
id.Equals(GetFlowParameter_id_LastCalledWith) );
}
 

             public Task<Flow> GetFlow(string id)
        {
            _getFlowNumberOfTimesCalled++;            

            GetFlowParameter_id_LastCalledWith = id;

            return _getFlowReturnValue;
        }

// -------------- GetMessagesForFlow ------------ 

private Task<IEnumerable<Message>> _getMessagesForFlowReturnValue;

        private int _getMessagesForFlowNumberOfTimesCalled;

        public string GetMessagesForFlowParameter_id_LastCalledWith;
        
        public virtual void GetMessagesForFlowSetReturnValue(Task<IEnumerable<Message>> value)
        {
            _getMessagesForFlowReturnValue = value;
        }    


        public virtual bool GetMessagesForFlowWasCalled()
{
   return _getMessagesForFlowNumberOfTimesCalled > 0;
}


public virtual bool GetMessagesForFlowWasCalled(int times)
{
   return _getMessagesForFlowNumberOfTimesCalled == times;
}


public virtual int GetMessagesForFlowTimesCalled()
{
   return _getMessagesForFlowNumberOfTimesCalled;
}


public virtual bool GetMessagesForFlowWasCalledWith(string id){
return (
id.Equals(GetMessagesForFlowParameter_id_LastCalledWith) );
}
 

             public Task<IEnumerable<Message>> GetMessagesForFlow(string id)
        {
            _getMessagesForFlowNumberOfTimesCalled++;            

            GetMessagesForFlowParameter_id_LastCalledWith = id;

            return _getMessagesForFlowReturnValue;
        }

// -------------- SendMessage ------------


        private int _sendMessageNumberOfTimesCalled;        

        public string SendMessageParameter_flowId_LastCalledWith;public string SendMessageParameter_message_LastCalledWith;

        public virtual bool SendMessageWasCalled()
{
   return _sendMessageNumberOfTimesCalled > 0;
}


public virtual bool SendMessageWasCalled(int times)
{
   return _sendMessageNumberOfTimesCalled == times;
}


public virtual int SendMessageTimesCalled()
{
   return _sendMessageNumberOfTimesCalled;
}


public virtual bool SendMessageWasCalledWith(string flowId, string message){
return (
flowId.Equals(SendMessageParameter_flowId_LastCalledWith)  && 
message.Equals(SendMessageParameter_message_LastCalledWith) );
}


        public void SendMessage(string flowId, string message)
        {
            _sendMessageNumberOfTimesCalled++;            

            SendMessageParameter_flowId_LastCalledWith = flowId;SendMessageParameter_message_LastCalledWith = message;
        }
}
}
