using Flowdock.Client.Domain;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Flowdock.Client.Stream;
namespace MoqaLate.Autogenerated
{
public partial class FlowStreamingConnectionMoqaLate : IFlowStreamingConnection
{


// -------------- Start ------------


        private int _startNumberOfTimesCalled;        

        public string StartParameter_username_LastCalledWith;public string StartParameter_password_LastCalledWith;public Flow StartParameter_flow_LastCalledWith;public Action<Message> StartParameter_callback_LastCalledWith;

        public virtual bool StartWasCalled()
{
   return _startNumberOfTimesCalled > 0;
}


public virtual bool StartWasCalled(int times)
{
   return _startNumberOfTimesCalled == times;
}


public virtual int StartTimesCalled()
{
   return _startNumberOfTimesCalled;
}


public virtual bool StartWasCalledWith(string username, string password, Flow flow, Action<Message> callback){
return (
username.Equals(StartParameter_username_LastCalledWith)  && 
password.Equals(StartParameter_password_LastCalledWith)  && 
flow.Equals(StartParameter_flow_LastCalledWith)  && 
callback.Equals(StartParameter_callback_LastCalledWith) );
}


        public void Start(string username, string password, Flow flow, Action<Message> callback)
        {
            _startNumberOfTimesCalled++;            

            StartParameter_username_LastCalledWith = username;StartParameter_password_LastCalledWith = password;StartParameter_flow_LastCalledWith = flow;StartParameter_callback_LastCalledWith = callback;
        }


// -------------- Stop ------------


        private int _stopNumberOfTimesCalled;        

        

        public virtual bool StopWasCalled()
{
   return _stopNumberOfTimesCalled > 0;
}


public virtual bool StopWasCalled(int times)
{
   return _stopNumberOfTimesCalled == times;
}


public virtual int StopTimesCalled()
{
   return _stopNumberOfTimesCalled;
}




        public void Stop()
        {
            _stopNumberOfTimesCalled++;            

            
        }
}
}
